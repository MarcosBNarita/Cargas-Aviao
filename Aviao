from random import Random
from time import time
from math import cos
from math import pi
from inspyred import ec
from inspyred.ec import terminators
import numpy as np
import os

def generate_(random, args):
    size = args.get('num_inputs', 12)
    return [random.randint(0, 16000) for i in range(size)]

def evaluate_(candidates, args):
    fitness = []
    for cs in candidates:
        fit = perform_fitness(cs[0], cs[1], cs[2], cs[3], cs[4], cs[5], cs[6], cs[7], cs[8], cs[9], cs[10], cs[11])
        fitness.append(fit)
    return fitness

def perform_fitness(dia1, cen1, tra1, dia2, cen2, tra2, dia3, cen3, tra3, dia4, cen4, tra4):

    dia1 = np.round(dia1)
    cen1 = np.round(cen1)
    tra1 = np.round(tra1)
    dia2 = np.round(dia2)
    cen2 = np.round(cen2)
    tra2 = np.round(tra2)
    dia3 = np.round(dia3)
    cen3 = np.round(cen3)
    tra3 = np.round(tra3)
    dia4 = np.round(dia4)
    cen4 = np.round(cen4)
    tra4 = np.round(tra4)

    total = dia1 + dia2 + dia3 + dia4 + cen1 + cen2 + cen3 + cen4 + tra1 + tra2 + tra3 + tra4

    # define o fit baseado no valor máximo dado pelo professor
    fit = float((dia1 * 0.31 + cen1 * 0.31 + tra1 * 0.31 + dia2 * 0.38 + cen2 * 0.38 + tra2 * 0.38 + dia3 * 0.35 + cen3 * 0.35 + tra3 * 0.35 + dia4 * 0.285 + cen4 * 0.285 + tra4 * 0.285) / 12151.56)
    
    # define os limites de uso das cargas
    h1 = np.maximum(0, float(((dia1+cen1+tra1) - (18000)) / (18000/13)))
    h2 = np.maximum(0, float(((dia2+cen2+tra2) - (15000)) / (15000/13)))
    h3 = np.maximum(0, float(((dia3+cen3+tra3) - (23000)) / (23000/13)))
    h4 = np.maximum(0, float(((dia4+cen4+tra4) - (12000)) / (12000/13)))

    # define os limites de volume de cada compartimento
    h5 = np.maximum(0, float(((dia1 * 0.48 + dia2 * 0.65 + dia3 * 0.58 + dia4 * 0.39) - 6800) / (6800/13)))
    h6 = np.maximum(0, float(((cen1 * 0.48 + cen2 * 0.65 + cen3 * 0.58 + cen4 * 0.39) - 8700) / (8700/13)))
    h7 = np.maximum(0, float(((tra1 * 0.48 + tra2 * 0.65 + tra3 * 0.58 + tra4 * 0.39) - 5300) / (5300/13)))

    # define os pesos maximos de cada compartimento
    h8 = np.maximum(0, float(((dia1 + dia2 + dia3 + dia4) - 10000) / (10000/13)))
    h9 = np.maximum(0, float(((cen1 + cen2 + cen3 + cen4) - 16000) / (16000/13)))
    h10 = np.maximum(0, float(((tra1 + tra2 + tra3 + tra4) - 8000) / (8000/13)))

    #define a restrição de proporção
    h11 = np.maximum(0, float((((dia1 + dia2 + dia3 + dia4)/total) - 0.2941) / (0.2941/13)))
    h12 = np.maximum(0, float((((cen1 + cen2 + cen3 + cen4)/total) - 0.4705) / (0.4705/13)))
    h13 = np.maximum(0, float((((tra1 + tra2 + tra3 + tra4)/total) - 0.2352) / (0.2352/13)))

    fit = fit - (h1 + h2 + h3 + h4 + h5 + h6 + h7 + h8 + h9 + h10 + h11 + h12 + h13)
    return fit


def solution_evaluation(DIA1, CEN1, TRA1, DIA2, CEN2, TRA2, DIA3, CEN3, TRA3, DIA4, CEN4, TRA4):
    DIA1 = np.round(DIA1)
    DIA2 = np.round(DIA2)
    DIA3 = np.round(DIA3)
    DIA4 = np.round(DIA4)
    CEN1 = np.round(CEN1)
    CEN2 = np.round(CEN2)
    CEN3 = np.round(CEN3)
    CEN4 = np.round(CEN4)
    TRA1 = np.round(TRA1)
    TRA2 = np.round(TRA2)
    TRA3 = np.round(TRA3)
    TRA4 = np.round(TRA4)

    # imprime os dados do compartimento dianteiro
    print("Dianteiro Carga 1: ", DIA1)
    print("Dianteiro Carga 2: ", DIA2)
    print("Dianteiro Carga 3:", DIA3)
    print("Dianteiro Carga 4: ", DIA4)
    print("Peso Dianteiro: ", DIA1+DIA2+DIA3+DIA4)
    
    # imprime os dados do compartimento central
    print("Central Carga 1: ", CEN1)
    print("Central Carga 2: ", CEN2)
    print("Central Carga 3: ", CEN3)
    print("Central Carga 4: ", CEN4)
    print("Peso Central: ", CEN1+CEN2+CEN3+CEN4)
    
    # imprime os dados do compartimento traseiro
    print("Traseiro Carga 1: ", TRA1)
    print("Traseiro Carga 2:", TRA2)
    print("Traseiro Carga 3: ", TRA3)
    print("Traseiro Carga 4: ", TRA4)
    print("Peso Traseiro: ", TRA1+TRA2+TRA3+TRA4)

    # imprime os tatais de cada carga
    print("Total Carga 1: ", DIA1+CEN1+TRA1)
    print("Total Carga 2: ", DIA2+CEN2+TRA2)
    print("Total Carga 3: ", DIA3+CEN3+TRA3)
    print("Total Carga 4: ", DIA4+CEN4+TRA4)

    # imprime os valores dos volumes
    print("Volume dianteiro: ", float((DIA1*0.48)+(DIA2*0.65)+(DIA3*0.58)+(DIA4*0.39)))
    print("Volume centro: ",float((CEN1*0.48)+(CEN2*0.65)+(CEN3*0.58)+(CEN4*0.39)))
    print("Volume traseiro: ",float((TRA1*0.48)+(TRA2*0.65)+(TRA3*0.58)+(TRA4*0.39)))
    print("Volume Total: ",float((DIA1*0.48)+(DIA2*0.65)+(DIA3*0.58)+(DIA4*0.39)+(CEN1*0.48)+(CEN2*0.65)+(CEN3*0.58)+(CEN4*0.39)+(TRA1*0.48)+(TRA2*0.65)+(TRA3*0.58)+(TRA4*0.39)))

    # imprime o lucro total
    print("Lucro total: ", float((DIA1*0.31)+(CEN1*0.31)+(TRA1*0.31)+(DIA2*0.38)+(CEN2*0.38)+(TRA2*0.38)+(DIA3*0.35)+(CEN3*0.35)+(TRA3*0.35)+(DIA4*0.285)+(CEN4*0.285)+(TRA4*0.285)))

def main():
    rand = Random()
    rand.seed(int(time()))

    ea = ec.GA(rand)
    ea.selector = ec.selectors.tournament_selection
    ea.variator = [ec.variators.uniform_crossover,
                   ec.variators.gaussian_mutation]

    ea.replacer = ec.replacers.steady_state_replacement

    ea.terminator = terminators.generation_termination

    ea.observer = [ec.observers.stats_observer, ec.observers.file_observer]

    final_pop = ea.evolve(generator=generate_,
                          evaluator=evaluate_,
                          pop_size=5000,
                          maximize=True,
                          bounder=ec.Bounder(0, 26000),
                          max_generations=10000,
                          num_inputs= 12,
                          crossover_rae = 1.0,
                          num_crossover_points = 1,
                          mutation_rate = 0.15,
                          num_elites = 1,
                          num_selected = 12,
                          tournament_size = 12,
                          statistics_file=open("aviao_stats.csv", "w"),
                          individuals_file=open("aviao_individuais.csv", "w"))
    
    # escolhe o melhor candidato
    final_pop.sort(reverse=True)
    print(final_pop[0])

    perform_fitness(final_pop[0].candidate[0], final_pop[0].candidate[1], final_pop[0].candidate[2], final_pop[0].candidate[3], final_pop[0].candidate[4], final_pop[0].candidate[5], final_pop[0].candidate[6], final_pop[0].candidate[7], final_pop[0].candidate[8], final_pop[0].candidate[9], final_pop[0].candidate[10], final_pop[0].candidate[11])
    solution_evaluation(final_pop[0].candidate[0], final_pop[0].candidate[1], final_pop[0].candidate[2], final_pop[0].candidate[3], final_pop[0].candidate[4], final_pop[0].candidate[5], final_pop[0].candidate[6], final_pop[0].candidate[7], final_pop[0].candidate[8], final_pop[0].candidate[9], final_pop[0].candidate[10], final_pop[0].candidate[11])

main()
